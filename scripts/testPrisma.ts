import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function main() {
  // CrÃ©ation d'un bÃ¢timent avec plusieurs colonnes (annÃ©es)
  const building = await prisma.building.create({
    data: {
      buildingName: "Immeuble A", // Nom du bÃ¢timent
      buildingGroup: "Groupe 1", // Groupe d'immeuble
      subgroup: "Zone X", // Sous-groupe
      columns: {
        create: [
          { title: "2025", year: 2025 },
          { title: "2026", year: 2026 },
          { title: "2027", year: 2027 },
        ],
      },
    },
    include: {
      columns: true, // Inclure les colonnes dans la rÃ©ponse
    },
  });

  console.log("âœ… BÃ¢timent crÃ©Ã© avec les colonnes : ", building);

  // CrÃ©er quelques tags (exemple)
  const tags = await Promise.all([
    prisma.tag.upsert({
      where: { name: "Urgent" },
      update: {},
      create: { name: "Urgent" },
    }),
    prisma.tag.upsert({
      where: { name: "Plomberie" },
      update: {},
      create: { name: "Plomberie" },
    }),
    prisma.tag.upsert({
      where: { name: "Peinture" },
      update: {},
      create: { name: "Peinture" },
    }),
  ]);

  console.log("âœ… Tags crÃ©Ã©s ou rÃ©cupÃ©rÃ©s : ", tags);

  // Ajouter des tÃ¢ches pour chaque colonne avec des tags associÃ©s
  const tasks = await Promise.all(
    building.columns.map((column) =>
      prisma.task.create({
        data: {
          content: `TÃ¢che pour ${column.title}`, // Contenu de la tÃ¢che
          priority: "Haute", // PrioritÃ© de la tÃ¢che
          price: 5000, // Prix de la tÃ¢che
          discipline: "RÃ©novation", // Discipline de la tÃ¢che
          description: `Description pour la tÃ¢che de ${column.title}`, // Description
          columnId: column.id, // RÃ©fÃ©rence Ã  la colonne
          tags: {
            connect: tags.map((tag) => ({ id: tag.id })), // Associer les tags Ã  la tÃ¢che
          },
        },
      })
    )
  );

  console.log(
    "âœ… TÃ¢ches ajoutÃ©es pour chaque colonne avec des tags associÃ©s : ",
    tasks
  );

  // RÃ©cupÃ©rer ce bÃ¢timent avec toutes ses colonnes et tÃ¢ches
  const buildingWithTasks = await prisma.building.findUnique({
    where: { id: building.id },
    include: {
      columns: {
        include: { tasks: { include: { tags: true } } }, // Inclure les tÃ¢ches et leurs tags
      },
    },
  });

  console.log(
    "ðŸ“Š BÃ¢timent avec ses colonnes, tÃ¢ches et tags : ",
    buildingWithTasks
  );

  await prisma.$disconnect();
}

main().catch((e) => {
  console.error(e);
  prisma.$disconnect();
  process.exit(1);
});
